# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'bow.ui'
#
# Created by: PyQt5 UI code generator 5.6
#
# WARNING! All changes made in this file will be lost!

import sys, os, platform
from PyQt5 import QtCore, QtGui, QtWidgets


class Bow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__(None)
        self.setObjectName("bow")
        self.setEnabled(True)
        self.resize(587, 640)
        self.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.setWindowTitle("Language Processing")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Images/BOW.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget()
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setEnabled(True)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 550, 773))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.tabWidget = QtWidgets.QTabWidget(self.scrollAreaWidgetContents)
        self.tabWidget.setObjectName("tabWidget")
        self.clustering = QtWidgets.QWidget()
        self.clustering.setObjectName("clustering")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.clustering)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.groupBox_3 = QtWidgets.QGroupBox(self.clustering)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setTitle("Analysis parameters")
        self.groupBox_3.setObjectName("groupBox_3")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox_3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.groupBox_4.setFont(font)
        self.groupBox_4.setTitle("Word frequency")
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.groupBox_4)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.word_frequency_2 = QtWidgets.QLabel(self.groupBox_4)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.word_frequency_2.setFont(font)
        self.word_frequency_2.setText("All words present within the source will be saved as features and assigned a frequency per text.")
        self.word_frequency_2.setObjectName("word_frequency_2")
        self.verticalLayout_8.addWidget(self.word_frequency_2)
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setObjectName("formLayout")
        self.word_frequency_3 = QtWidgets.QLabel(self.groupBox_4)
        font = QtGui.QFont()
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.word_frequency_3.setFont(font)
        self.word_frequency_3.setToolTip("")
        self.word_frequency_3.setText("Choose word frequency measuring method :")
        self.word_frequency_3.setObjectName("word_frequency_3")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.word_frequency_3)
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.countvectorizer = QtWidgets.QRadioButton(self.groupBox_4)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.countvectorizer.setFont(font)
        self.countvectorizer.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.countvectorizer.setText("CountVectorizer")
        self.countvectorizer.setObjectName("countvectorizer")
        self.verticalLayout_10.addWidget(self.countvectorizer)
        self.tf_idf = QtWidgets.QRadioButton(self.groupBox_4)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.tf_idf.setFont(font)
        self.tf_idf.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.tf_idf.setText("TF - IDF")
        self.tf_idf.setObjectName("tf_idf")
        self.verticalLayout_10.addWidget(self.tf_idf)
        self.formLayout.setLayout(0, QtWidgets.QFormLayout.FieldRole, self.verticalLayout_10)
        self.verticalLayout_8.addLayout(self.formLayout)
        self.word_frequency_4 = QtWidgets.QLabel(self.groupBox_4)
        font = QtGui.QFont()
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.word_frequency_4.setFont(font)
        self.word_frequency_4.setText("Choose minimum and maximum source frequency (proportion of files in which a feature appears) :")
        self.word_frequency_4.setObjectName("word_frequency_4")
        self.verticalLayout_8.addWidget(self.word_frequency_4)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(80, 20, QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.formLayout_7 = QtWidgets.QFormLayout()
        self.formLayout_7.setObjectName("formLayout_7")
        self.minimum = QtWidgets.QLabel(self.groupBox_4)
        self.minimum.setMaximumSize(QtCore.QSize(58, 16777215))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.minimum.setFont(font)
        self.minimum.setText("Minimum :")
        self.minimum.setObjectName("minimum")
        self.formLayout_7.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.minimum)
        self.minimum_frequency = QtWidgets.QSpinBox(self.groupBox_4)
        self.minimum_frequency.setMaximumSize(QtCore.QSize(50, 16777215))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.minimum_frequency.setFont(font)
        self.minimum_frequency.setSuffix("%")
        self.minimum_frequency.setMaximum(100)
        self.minimum_frequency.setSingleStep(1)
        self.minimum_frequency.setProperty("value", 20)
        self.minimum_frequency.setObjectName("minimum_frequency")
        self.formLayout_7.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.minimum_frequency)
        self.maximum = QtWidgets.QLabel(self.groupBox_4)
        self.maximum.setMaximumSize(QtCore.QSize(58, 16777215))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.maximum.setFont(font)
        self.maximum.setText("Maximum :")
        self.maximum.setObjectName("maximum")
        self.formLayout_7.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.maximum)
        self.maximum_frequency = QtWidgets.QSpinBox(self.groupBox_4)
        self.maximum_frequency.setMaximumSize(QtCore.QSize(50, 16777215))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.maximum_frequency.setFont(font)
        self.maximum_frequency.setSuffix("%")
        self.maximum_frequency.setMaximum(100)
        self.maximum_frequency.setSingleStep(1)
        self.maximum_frequency.setProperty("value", 70)
        self.maximum_frequency.setObjectName("maximum_frequency")
        self.formLayout_7.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.maximum_frequency)
        self.horizontalLayout.addLayout(self.formLayout_7)
        self.verticalLayout_8.addLayout(self.horizontalLayout)
        self.formLayout_8 = QtWidgets.QFormLayout()
        self.formLayout_8.setObjectName("formLayout_8")
        self.word_frequency_5 = QtWidgets.QLabel(self.groupBox_4)
        font = QtGui.QFont()
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.word_frequency_5.setFont(font)
        self.word_frequency_5.setText("Choose the total number of features that will be selected for analysis :")
        self.word_frequency_5.setObjectName("word_frequency_5")
        self.formLayout_8.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.word_frequency_5)
        self.number_features = QtWidgets.QSpinBox(self.groupBox_4)
        self.number_features.setMaximumSize(QtCore.QSize(80, 16777215))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.number_features.setFont(font)
        self.number_features.setMaximum(10000)
        self.number_features.setProperty("value", 500)
        self.number_features.setObjectName("number_features")
        self.formLayout_8.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.number_features)
        self.verticalLayout_8.addLayout(self.formLayout_8)
        self.verticalLayout.addWidget(self.groupBox_4)
        self.groupBox_6 = QtWidgets.QGroupBox(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_6.setFont(font)
        self.groupBox_6.setTitle("Topic Modelling")
        self.groupBox_6.setObjectName("groupBox_6")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.groupBox_6)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.frequency_matrix_factorisation_2 = QtWidgets.QLabel(self.groupBox_6)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.frequency_matrix_factorisation_2.setFont(font)
        self.frequency_matrix_factorisation_2.setText("The features/text matrix will be factorised to make the most important features stand out.")
        self.frequency_matrix_factorisation_2.setObjectName("frequency_matrix_factorisation_2")
        self.verticalLayout_6.addWidget(self.frequency_matrix_factorisation_2)
        self.formLayout_4 = QtWidgets.QFormLayout()
        self.formLayout_4.setFormAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.formLayout_4.setObjectName("formLayout_4")
        self.frequency_matrix_factorisation_3 = QtWidgets.QLabel(self.groupBox_6)
        font = QtGui.QFont()
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.frequency_matrix_factorisation_3.setFont(font)
        self.frequency_matrix_factorisation_3.setToolTip("")
        self.frequency_matrix_factorisation_3.setText("Choose matrix factorisation method :")
        self.frequency_matrix_factorisation_3.setObjectName("frequency_matrix_factorisation_3")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.frequency_matrix_factorisation_3)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.lda = QtWidgets.QRadioButton(self.groupBox_6)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.lda.setFont(font)
        self.lda.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.lda.setToolTip("Latent Dirichlet Allocation")
        self.lda.setText("LDA")
        self.lda.setObjectName("lda")
        self.verticalLayout_2.addWidget(self.lda)
        self.nmf = QtWidgets.QRadioButton(self.groupBox_6)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.nmf.setFont(font)
        self.nmf.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.nmf.setToolTip("Non-negative Matrix Factorization")
        self.nmf.setText("NMF")
        self.nmf.setObjectName("nmf")
        self.verticalLayout_2.addWidget(self.nmf)
        self.formLayout_4.setLayout(0, QtWidgets.QFormLayout.FieldRole, self.verticalLayout_2)
        self.verticalLayout_6.addLayout(self.formLayout_4)
        self.topic_modelling_2 = QtWidgets.QLabel(self.groupBox_6)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.topic_modelling_2.setFont(font)
        self.topic_modelling_2.setText("The features will be assembled into topics that link texts containing the same frequent features.")
        self.topic_modelling_2.setObjectName("topic_modelling_2")
        self.verticalLayout_6.addWidget(self.topic_modelling_2)
        self.formLayout_2 = QtWidgets.QFormLayout()
        self.formLayout_2.setObjectName("formLayout_2")
        self.number_topics = QtWidgets.QSpinBox(self.groupBox_6)
        self.number_topics.setMaximumSize(QtCore.QSize(50, 16777215))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.number_topics.setFont(font)
        self.number_topics.setProperty("value", 3)
        self.number_topics.setObjectName("number_topics")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.number_topics)
        self.topic_modelling_4 = QtWidgets.QLabel(self.groupBox_6)
        font = QtGui.QFont()
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.topic_modelling_4.setFont(font)
        self.topic_modelling_4.setText("Choose the number of features used to describe the topics :")
        self.topic_modelling_4.setObjectName("topic_modelling_4")
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.topic_modelling_4)
        self.number_most_important_features = QtWidgets.QSpinBox(self.groupBox_6)
        self.number_most_important_features.setMaximumSize(QtCore.QSize(50, 16777215))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.number_most_important_features.setFont(font)
        self.number_most_important_features.setProperty("value", 20)
        self.number_most_important_features.setObjectName("number_most_important_features")
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.number_most_important_features)
        self.topic_modelling_3 = QtWidgets.QLabel(self.groupBox_6)
        font = QtGui.QFont()
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.topic_modelling_3.setFont(font)
        self.topic_modelling_3.setText("Choose the number of topics that will be created :")
        self.topic_modelling_3.setObjectName("topic_modelling_3")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.topic_modelling_3)
        self.verticalLayout_6.addLayout(self.formLayout_2)
        self.verticalLayout.addWidget(self.groupBox_6)
        self.groupBox_7 = QtWidgets.QGroupBox(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_7.setFont(font)
        self.groupBox_7.setTitle("Clustering")
        self.groupBox_7.setObjectName("groupBox_7")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.groupBox_7)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.clustering_2 = QtWidgets.QLabel(self.groupBox_7)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.clustering_2.setFont(font)
        self.clustering_2.setText("The texts will be separated into clusters, determined by the distance between texts (calculated from the projection of the matrix on the topics).")
        self.clustering_2.setWordWrap(True)
        self.clustering_2.setObjectName("clustering_2")
        self.verticalLayout_7.addWidget(self.clustering_2)
        self.formLayout_9 = QtWidgets.QFormLayout()
        self.formLayout_9.setObjectName("formLayout_9")
        self.clustering_3 = QtWidgets.QLabel(self.groupBox_7)
        font = QtGui.QFont()
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.clustering_3.setFont(font)
        self.clustering_3.setText("Choose the number k of clusters that will be created :")
        self.clustering_3.setObjectName("clustering_3")
        self.formLayout_9.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.clustering_3)
        self.number_clusters = QtWidgets.QSpinBox(self.groupBox_7)
        self.number_clusters.setMaximumSize(QtCore.QSize(50, 16777215))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.number_clusters.setFont(font)
        self.number_clusters.setProperty("value", 3)
        self.number_clusters.setObjectName("number_clusters")
        self.formLayout_9.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.number_clusters)
        self.verticalLayout_7.addLayout(self.formLayout_9)
        self.verticalLayout.addWidget(self.groupBox_7)
        self.launch_analysis_button = QtWidgets.QPushButton(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.launch_analysis_button.setFont(font)
        self.launch_analysis_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.launch_analysis_button.setText("Launch analysis")
        self.launch_analysis_button.setShortcut("Enter")
        self.launch_analysis_button.setObjectName("launch_analysis_button")
        self.verticalLayout.addWidget(self.launch_analysis_button)
        self.verticalLayout_9.addWidget(self.groupBox_3)
        self.tabWidget.addTab(self.clustering, "Clustering")
        self.text_to_text_distance = QtWidgets.QWidget()
        self.text_to_text_distance.setObjectName("text_to_text_distance")
        self.tabWidget.addTab(self.text_to_text_distance, "Text-to-text distance")
        self.top_features = QtWidgets.QWidget()
        self.top_features.setObjectName("top_features")
        self.tabWidget.addTab(self.top_features, "Top features")
        self.gridLayout_2.addWidget(self.tabWidget, 2, 0, 1, 1)
        self.source_format = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.source_format.setFont(font)
        self.source_format.setTitle("Source format")
        self.source_format.setObjectName("source_format")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.source_format)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.source_format_2 = QtWidgets.QLabel(self.source_format)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.source_format_2.setFont(font)
        self.source_format_2.setText("If the source is PDF files, the files wil converted to TXT and saved to a subfolder for analysis.")
        self.source_format_2.setWordWrap(True)
        self.source_format_2.setObjectName("source_format_2")
        self.verticalLayout_3.addWidget(self.source_format_2)
        self.formLayout_3 = QtWidgets.QFormLayout()
        self.formLayout_3.setObjectName("formLayout_3")
        self.source_format_3 = QtWidgets.QLabel(self.source_format)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.source_format_3.setFont(font)
        self.source_format_3.setText("Select the file type of your source files :")
        self.source_format_3.setWordWrap(False)
        self.source_format_3.setObjectName("source_format_3")
        self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.source_format_3)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.pdf_button = QtWidgets.QRadioButton(self.source_format)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.pdf_button.setFont(font)
        self.pdf_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pdf_button.setText("PDF")
        self.pdf_button.setShortcut("")
        self.pdf_button.setObjectName("pdf_button")
        self.verticalLayout_11.addWidget(self.pdf_button)
        self.txt_button = QtWidgets.QRadioButton(self.source_format)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.txt_button.setFont(font)
        self.txt_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.txt_button.setText("TXT")
        self.txt_button.setShortcut("")
        self.txt_button.setObjectName("txt_button")
        self.verticalLayout_11.addWidget(self.txt_button)
        self.formLayout_3.setLayout(0, QtWidgets.QFormLayout.FieldRole, self.verticalLayout_11)
        self.verticalLayout_3.addLayout(self.formLayout_3)
        self.gridLayout_2.addWidget(self.source_format, 1, 0, 1, 1)
        self.source_folder = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.source_folder.setFont(font)
        self.source_folder.setTitle("Source folder")
        self.source_folder.setObjectName("source_folder")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.source_folder)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.formLayout_5 = QtWidgets.QFormLayout()
        self.formLayout_5.setObjectName("formLayout_5")
        self.source_folder_2 = QtWidgets.QLabel(self.source_folder)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.source_folder_2.setFont(font)
        self.source_folder_2.setText("Select the folder where the source files are stored :")
        self.source_folder_2.setObjectName("source_folder_2")
        self.formLayout_5.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.source_folder_2)
        self.choose_source_folder = QtWidgets.QGridLayout()
        self.choose_source_folder.setObjectName("choose_source_folder")
        self.source_folder_line = QtWidgets.QLineEdit(self.source_folder)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.source_folder_line.sizePolicy().hasHeightForWidth())
        self.source_folder_line.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.source_folder_line.setFont(font)
        self.source_folder_line.setInputMask("")
        self.source_folder_line.setText("")
        self.source_folder_line.setObjectName("source_folder_line")
        self.choose_source_folder.addWidget(self.source_folder_line, 0, 1, 1, 1)
        self.browse_button = QtWidgets.QPushButton(self.source_folder)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.browse_button.sizePolicy().hasHeightForWidth())
        self.browse_button.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.browse_button.setFont(font)
        self.browse_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.browse_button.setText("Browse")
        self.browse_button.setShortcut("")
        self.browse_button.setObjectName("browse_button")
        self.choose_source_folder.addWidget(self.browse_button, 0, 2, 1, 1)
        self.formLayout_5.setLayout(0, QtWidgets.QFormLayout.FieldRole, self.choose_source_folder)
        self.verticalLayout_4.addLayout(self.formLayout_5)
        self.gridLayout_2.addWidget(self.source_folder, 0, 0, 1, 1)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout.addWidget(self.scrollArea, 0, 0, 1, 1)
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar()
        self.menubar.setGeometry(QtCore.QRect(0, 0, 587, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setTitle("File")
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setToolTip("")
        self.menuEdit.setStatusTip("")
        self.menuEdit.setWhatsThis("")
        self.menuEdit.setAccessibleName("")
        self.menuEdit.setAccessibleDescription("")
        self.menuEdit.setTitle("Edit")
        self.menuEdit.setObjectName("menuEdit")
        self.menuOptions = QtWidgets.QMenu(self.menubar)
        self.menuOptions.setTitle("Options")
        self.menuOptions.setObjectName("menuOptions")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setTitle("Help")
        self.menuHelp.setObjectName("menuHelp")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar()
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        self.actionAbout = QtWidgets.QAction(self)
        self.actionAbout.setText("About")
        self.actionAbout.setIconText("About")
        self.actionAbout.setToolTip("About")
        self.actionAbout.setStatusTip("")
        self.actionAbout.setWhatsThis("")
        self.actionAbout.setShortcut("")
        self.actionAbout.setObjectName("actionAbout")
        self.actionNew = QtWidgets.QAction(self)
        self.actionNew.setText("New")
        self.actionNew.setIconText("New")
        self.actionNew.setToolTip("New")
        self.actionNew.setStatusTip("")
        self.actionNew.setWhatsThis("")
        self.actionNew.setShortcut("")
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QtWidgets.QAction(self)
        self.actionOpen.setText("Open")
        self.actionOpen.setIconText("Open")
        self.actionOpen.setToolTip("Open")
        self.actionOpen.setStatusTip("")
        self.actionOpen.setWhatsThis("")
        self.actionOpen.setShortcut("")
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave_as = QtWidgets.QAction(self)
        self.actionSave_as.setText("Save as...")
        self.actionSave_as.setIconText("Save as")
        self.actionSave_as.setToolTip("Save as")
        self.actionSave_as.setStatusTip("")
        self.actionSave_as.setWhatsThis("")
        self.actionSave_as.setShortcut("")
        self.actionSave_as.setObjectName("actionSave_as")
        self.actionSave = QtWidgets.QAction(self)
        self.actionSave.setText("Save")
        self.actionSave.setIconText("Save")
        self.actionSave.setToolTip("Save")
        self.actionSave.setStatusTip("")
        self.actionSave.setWhatsThis("")
        self.actionSave.setShortcut("")
        self.actionSave.setObjectName("actionSave")
        self.actionExit = QtWidgets.QAction(self)
        self.actionExit.setText("Exit")
        self.actionExit.setIconText("Exit")
        self.actionExit.setToolTip("Exit")
        self.actionExit.setStatusTip("")
        self.actionExit.setWhatsThis("")
        self.actionExit.setShortcut("")
        self.actionExit.setObjectName("actionExit")
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_as)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuHelp.addAction(self.actionAbout)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuOptions.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.tabWidget.setCurrentIndex(0)

        # Menus
        self.actionExit.triggered.connect(self.exit_program)
        self.actionSave_as.triggered.connect(self.save_as)
        self.actionAbout.triggered.connect(self.open_about_dialog)

        # Folder
        self.dir_path = ""
        self.browse_button.clicked.connect(self.open_directory_name_dialog)
        self.input_files = []

        # Format
        self.format = ""
        self.pdf_button.toggle()
        self.pdf_button.toggled['bool'].connect(self.set_format)

        # Analysis parameters
        self.countvectorizer.toggle()
        self.lda.toggle()

        self.input_parameters = {}
        self.output_parameters = []

        self.pdf_button.

        # Launch Analysis
        self.launch_analysis_button.clicked.connect(self.launch_analysis)


    def exit_program(self):
        exit_message = QtWidgets.QMessageBox()
        exit_message.setWindowTitle("Exit program")
        exit_message.setText("Any changes made will be discarded.\nDo you want to proceed ?")
        exit_message.addButton(QtWidgets.QMessageBox.Yes)
        exit_message.addButton(QtWidgets.QMessageBox.No)
        if (exit_message.exec_() == QtWidgets.QMessageBox.Yes):
            self.close()

    def launch_analysis(self):
        launch = False
        error_message_text = ""
        # self.output_parameters = [box.isChecked() for box in self.choose_outputs.buttons()]
        # print(self.output_parameters)
        # TODO : in save file, write what each item in self.parameters refers to ?

        # Check if path is valid
        if os.path.isdir(self.dir_path):
            # Check if format is valid
            if (self.format == "pdf" or self.format == "txt"):
                # Check if there are valid files in directory
                if len([file for file in os.listdir(self.dir_path) if file.endswith("." + self.format)]):
                    launch = True
                    # Check if parameters are valid
                    # if len([param for param in self.output_parameters if param]):
                    #     launch = True
                    # else:
                    #     error_message_text += "Select at least 1 output\n"
                else:
                    error_message_text += "No " + self.format.upper() + " files in directory\n"
            else:
                error_message_text += "Invalid format\n"
        else:
            error_message_text += "Invalid directory\n"

        # Launch or error message
        if launch :
            if self.format == "pdf":
                os.chdir(self.dir_path)
                if not os.path.isdir("converted"):
                    os.mkdir("converted")
                pdfs = [file for file in os.listdir() if file.endswith(".pdf")]

                for file in pdfs:
                    txt_name = "converted/"
                    for i in range(len(file) - 4):
                        txt_name += file[i]
                    txt_name += ".txt"
                    try:
                        os.system("pdftotext " + file + " " + txt_name)
                    except:
                        print("Conversion error")


                self.dir_path += "/converted"

            os.chdir(self.dir_path)
            self.input_files = [file for file in os.listdir() if file.endswith(".txt")]

            # TODO : access algorithm from here
            # output = algorithm(self.parameters, self.files)


        else :
            error_message = QtWidgets.QMessageBox()
            error_message.setWindowTitle("Error")
            error_message.setText(error_message_text)
            error_message.exec_()

    def set_format(self):
        self.format = ("pdf" if self.pdf_button.isChecked() else "txt")
        # print(self.format)

    def open_about_dialog(self):
        # icon = QtGui.QIcon()
        # icon.addPixmap(QtGui.QPixmap("BOW.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        message = QtWidgets.QMessageBox()
        # message.setIcon(icon)
        message.setWindowTitle("About")
        message.setText("ENPC 2016-2017\nProjet TDLOG\n"
                        "\nFrançois DUPRÉ\nPierre GIACCOBI\nPierre LECUYER\nFlorian MANTE")
        message.exec_()

    def open_directory_name_dialog(self):
        options = QtWidgets.QFileDialog.Options()
        self.dir_path = QtWidgets.QFileDialog.getExistingDirectory(self, "Choose source folder", "", options=options)
        self.source_folder_line.setText(str(self.dir_path))

    def save_as(self):
        file_path = os.getcwd() + "/save_test" + "/saved_file.txt"
        with open(file_path, 'w') as f:
            for data in self.output:
                f.write(data)

    def open_save_as_dialog(self):
        options = QtWidgets.QFileDialog.Options()
        # options |= QtWidgets.QFileDialog.DontUseNativeDialog
        fileName, _ = QtWidgets.QFileDialog.getSaveFileName(self, "QFileDialog.getSaveFileName()", "",
                                                            "All Files (*);;Text Files (*.txt)", options=options)
        if fileName:
            print(fileName)



if __name__ == '__main__':
    bow_gui = QtWidgets.QApplication(sys.argv)
    mainWindow = Bow()
    mainWindow.show()
    mainWindow.raise_()
    bow_gui.exec_()
